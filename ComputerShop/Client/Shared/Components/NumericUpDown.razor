<style>
    .up-down-button {
        background-color: transparent;
        background-repeat: no-repeat;
        border: none;
        cursor: pointer;
        overflow: hidden;
        outline: none;
        font-size: 1.2rem;
        width: 50px;
        opacity: 0.5;
    }
    .up-down-button:hover{
        opacity: 0.9;
    }
</style>

<div style="min-width: 75px;">
    <div class="align-items-center shadow border border-1 rounded">
        <div class="form-group d-flex py-1 px-2">
            <button @onclick="OnDownAsync" class="up-down-button fa fas fa-minus"></button>
            <input @onchange="OnChangeAsync" class="form-control shadow-none border-0 text-center" style="@InputCss" value="@Value">
            <button @onclick="OnUpAsync" class="up-down-button fa fas fa-plus"></button>
        </div>
    </div>
</div>

@code {
    private int value = 0;
    public int Value
    {
        get => value; set
        {
            if (value <= MaxValue && value >= MinValue)
            {
                this.value = value;
            }
        }
    }
    [Parameter] public int MaxValue { get; set; } = 99;
    [Parameter] public int MinValue { get; set; } = 0;
    [Parameter] public string InputCss { get; set; } = "font-size:1.2rem;";
    [Parameter] public int InitValue { get; set; } = 1;
    [Parameter] public EventCallback<int> OnValueChanged { get; set; }

    protected override void OnParametersSet()
    {
        value = InitValue;
        base.OnParametersSet();
    }

    protected async Task OnUpAsync()
    {
        int tmp = value;
        Value++;
        await OnValueChanged.InvokeAsync(value);
        if (tmp != value)
            await OnValueChanged.InvokeAsync(value);
    }

    protected async Task OnDownAsync()
    {
        int tmp = value;
        Value--;
        if(tmp != value)
            await OnValueChanged.InvokeAsync(value);
    }

    protected async Task OnChangeAsync(ChangeEventArgs e)
    {
        if(int.TryParse(e.Value?.ToString(), out int v))
        {
            int tmp = value;
            Value = v;
            if (tmp != value)
                await OnValueChanged.InvokeAsync(value);
        }
    }
}
