@page "/login"
@inject IAuthenticationService AuthenticationService
@inject ILocalStorageService LocalStorageServie
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Logowanie</PageTitle>

<div class="container" style="max-width: 750px">
    <h2 class="text-center">Stwórz nowe konto</h2>
    <EditForm Model="login" OnValidSubmit="OnLogIn">
        <DataAnnotationsValidator />
        <div class="mb-3">
            <h5 for="email">Email</h5>
            <InputText id="email" class="form-control shadow-none" @bind-Value="login.Email" />
            <ValidationMessage For="@(()=>login.Email)" />
        </div>
        <div class="mb-1">
            <h5 for="password">Hasło</h5>
            <InputText id="password" class="form-control shadow-none" type="password" @bind-Value="login.Password" />
            <ValidationMessage For="@(()=>login.Password)" />
        </div>
        <div class="text-center">
            <span class="cursorHand" @onclick="GoToRegister">Nie posiadasz konta?</span>
        </div>
        <div class="d-flex justify-content-end">
            <button type="submit" class="btn btn-primary shadow-none">Zaloguj</button>
        </div>
    </EditForm>
</div>




@code {
    Login login = new();

    protected async Task OnLogIn()
    {
        var response = await AuthenticationService.Login(login);
        if (response != null && response.Success && !string.IsNullOrWhiteSpace(response.Data))
        {
            ToastService.ShowSuccess(string.Empty, "Pomyślnie zalogowano");
            await LocalStorageServie.SetItemAsStringAsync("authenticationtoken", response.Data);
            NavigationManager.NavigateTo("");
        }
        else
            ToastService.ShowError(response?.Message, "Błąd");
    }

    protected void GoToRegister()
    {
        NavigationManager.GoToRegisterPage();
    }
}