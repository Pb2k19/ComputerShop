@page "/login"
@inject AuthenticationStateProvider StateProvider
@inject IUserService AuthenticationService
@inject ILocalStorageService LocalStorageServie
@inject NavigationManager NavigationManager
@inject IToastService ToastService

<PageTitle>Logowanie</PageTitle>

<div class="container" style="max-width: 750px">
    <div class="rounded shadow p-5 border border-1">
        <h2 class="text-center">Zaloguj się</h2>
        <EditForm Model="login" OnValidSubmit="OnLogIn">
            <DataAnnotationsValidator />
            <div class="mb-3">
                <h5 for="email">Email</h5>
                <InputText id="email" class="form-control shadow-none" @bind-Value="login.Email" />
                <ValidationMessage For="@(()=>login.Email)" />
            </div>
            <div class="mb-1">
                <h5 for="password">Hasło</h5>
                <InputText id="password" class="form-control shadow-none" type="password" @bind-Value="login.Password" />
                <ValidationMessage For="@(()=>login.Password)" />
            </div>
            <div class="text-center text-primary">
                <span class="cursorHand" @onclick="GoToRegister">Nie posiadasz konta?</span>
            </div>
            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-primary shadow-none  @(isLoggingIn ? "disabled":"")">
                    @buttonText
                    <span class="spinner-border spinner-border-sm  @(isLoggingIn ? "":"visually-hidden")" role="status" aria-hidden="true"></span>
                </button>
            </div>
        </EditForm>
    </div>
</div>




@code {
    private Login login = new();
    private string buttonText = "Zaloguj";
    private bool isLoggingIn = false;
    private string returnPage = string.Empty;

    protected override void OnInitialized()
    {
        Uri uri = NavigationManager.ToAbsoluteUri(this.NavigationManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("return-page", out var url))
        {
            returnPage = url;
        }
        base.OnInitialized();
    }

    protected async Task OnLogIn()
    {
        if (isLoggingIn)
            return;
        buttonText = "Logowanie";
        isLoggingIn = true;
        await Task.Delay(1);
        var response = await AuthenticationService.Login(login);
        if (response != null && response.Success && !string.IsNullOrWhiteSpace(response.Data))
        {
            await LocalStorageServie.SetItemAsStringAsync("jwt", response.Data);
            await StateProvider.GetAuthenticationStateAsync();
            ToastService.ShowSuccess(string.Empty, "Pomyślnie zalogowano");
            NavigationManager.NavigateTo(returnPage);
        }
        else
            ToastService.ShowError(response?.Message, "Błąd");
        buttonText = "Zaloguj się";
        isLoggingIn = false;
        await Task.Delay(1);
    }

    protected void GoToRegister()
    {
        NavigationManager.GoToRegisterPage();
    }
}