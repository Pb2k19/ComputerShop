@inject IProductsService ProductsService
@inject ICategoryService CategoryService
@page "/"
@page "/{category}"
@page "/find/{text}"


<div class="container">
    <div class="d-flex align-items-center">
        @if (currentCategory == null)
        {
            <PageTitle>SuperPC</PageTitle>
            <DisplayProducts Products="ProductsService.Products" />
        }
        else
        {
            <PageTitle>@currentCategory.Name</PageTitle>
            <DisplayProducts Products="ProductsService.Products" />
        }
    </div>
</div>

@code
{
    [Parameter] public string? Category { get; set; }
    [Parameter] public string? Text { get; set; }
    private Category? currentCategory;
    int pageCount, currentPage;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(Category))
        {
            currentCategory = null;
        }
        else
        {
            currentCategory = await CategoryService.GetCategoryByUrl(Category);
        }
        if (currentCategory != null)
        {
            var re = await ProductsService.LoadByCategoryIdAsync(currentCategory.Id, 1);
            pageCount = re.PagesCount;
            currentPage = re.CurrentPage;
        }
        else if (!string.IsNullOrWhiteSpace(Text))
        {
            await ProductsService.LoadByTextAsync(Text);
        }
        else
        {
            await ProductsService.LoadAllAsync();
        }
        base.OnParametersSet();
    }
}