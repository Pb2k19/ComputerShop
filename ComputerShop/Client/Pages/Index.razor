@inject IProductsService ProductsService
@inject ICategoryService CategoryService
@page "/"
@page "/{category}"
@page "/{category}/{page:int}"
@page "/find/{text}"
@page "/find/{text}/{page:int}"


<div class="container">
    <div class="d-flex align-items-center">
        @if (currentCategory == null)
        {
            <PageTitle>SuperPC</PageTitle>
            <DisplayProducts Products="ProductsService.Products" />
        }
        else
        {
            <PageTitle>@currentCategory.Name</PageTitle>
            <DisplayProducts Products="ProductsService.Products" />
        }
    </div>
    <PagesComponent PagesCount="pageCount" CurrentPage="Page" OnPageChanged="ChangePageAsync"/>
</div>

@code
{
    [Parameter] public string? Category { get; set; }
    [Parameter] public string? Text { get; set; }
    [Parameter] public int Page { get; set; } = 1;
    private Category? currentCategory;
    int pageCount;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(Category))
        {
            currentCategory = null;
        }
        else
        {
            currentCategory = await CategoryService.GetCategoryByUrl(Category);
        }
        await LoadProductsAsync();
        base.OnParametersSet();
    }

    protected async Task ChangePageAsync(int page)
    {
        Page = page;
        await LoadProductsAsync();
    }

    private async Task LoadProductsAsync()
    {
        if (currentCategory != null)
        {
            if (Page < 1)
                Page = 1;
            var re = await ProductsService.LoadByCategoryIdAsync(currentCategory.Id, Page);
            pageCount = re.PagesCount;
            Page = re.CurrentPage;
        }
        else if (!string.IsNullOrWhiteSpace(Text))
        {
            if (Page < 1)
                Page = 1;
            var re = await ProductsService.FindByTextAsync(Text, Page);

        }
        else
        {
            await ProductsService.LoadAllAsync();
        }
    }
}